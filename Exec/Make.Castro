AMREX_HOME ?= /path/to/amrex
CASTRO_HOME ?= /path/to/Castro

TOP := $(CASTRO_HOME)

EBASE = Castro

# This application only supports 3D.
ifneq ($(DIM),3)
  $(error StarLord only supports BL_SPACEDIM == 3)
endif

# EXTERN_CORE is simply a list of the directories we use that
# will be searched for runtime parameters
EXTERN_CORE ?= $(TOP)/Source

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# The default is to include the sponge functionality
ifeq ($(USE_ACC), TRUE)
   DEFINES += -DACC
endif

all: $(executable)
	@echo SUCCESS

# Problems can specify the input file for general_null by
# setting GENERAL_NET_INPUTS directly (full path) or just
# specifying the name of the inputs file as NETWORK_INPUTS
# and let us sort it out
ifndef GENERAL_NET_INPUTS
   ifneq "$(wildcard $(NETWORK_INPUTS))" ""
      GENERAL_NET_INPUTS := $(NETWORK_INPUTS)
   else
      GENERAL_NET_INPUTS := $(CASTRO_HOME)/Source/$(NETWORK_INPUTS)
   endif
endif

# AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here
Pdirs 	:= Base AmrCore Amr Boundary

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)


# Castro directories
Bdirs 	:= Source

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

ifeq ($(MEGA_FORTRAN), TRUE)
   F90EXE_sources += mega_f.F90
   #$(depEXETempDir)/f90.depends: mega_f.F90
else
   f90EXE_sources += $(ca_f90EXE_sources)
   F90EXE_sources += $(ca_F90EXE_sources)
endif

mega_f.F90: $(ca_F90EXE_sources) $(ca_f90EXE_sources)
	$(AMREX_HOME)/Tools/F_scripts/f90cat.py $^

# these are for finding runtime parameters
EXTERN_CORE += $(TOP)/constants

USE_MG = FALSE


include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak

# runtime parameter support for extern/ routines
f90EXE_sources += extern.f90

EXTERN_TEMPLATE := $(TOP)/Source/extern_probin.template

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
           --pa "$(EXTERN_PARAMETERS)"

# job_info support
#CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete it
# immediately.  this way if the build is interrupted, we are guaranteed
# to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) AMReX_buildInfo.cpp

#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
