AMREX_HOME ?= /path/to/amrex
CASTRO_HOME ?= /path/to/Castro

TOP := $(CASTRO_HOME)

EOS_HOME ?= $(TOP)/Microphysics/EOS
NETWORK_HOME ?= $(TOP)/Microphysics/networks
COND_HOME ?= $(TOP)/Microphysics/conductivity

EBASE = Castro

# This application only supports 3D.
ifneq ($(DIM),3)
  $(error StarLord only supports BL_SPACEDIM == 3)
endif

# EXTERN_CORE is simply a list of the directories we use in EOS, Networks and Util
# this list will be searched for runtime parameters
EXTERN_CORE ?=

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

# Castro uses a coarse grained OMP approach
DEFINES += -DCRSEGRNDOMP

# The default is to include the sponge functionality
ifeq ($(USE_ACC), TRUE)
   DEFINES += -DACC
endif

ifeq ($(USE_GRAV), TRUE)
   DEFINES += -DGRAVITY
endif

ifeq ($(USE_SHOCK_VAR), TRUE)
   DEFINES += -DSHOCK_VAR
endif


all: $(executable)
	@echo SUCCESS

ifdef MICROPHYSICS_HOME
   EOS_PATH := $(MICROPHYSICS_HOME)/EOS/$(strip $(EOS_dir))
   NETWORK_PATH := $(MICROPHYSICS_HOME)/networks/$(strip $(Network_dir))
endif

ifneq "$(wildcard $(EOS_HOME)/$(strip $(EOS_dir)) )" ""
   EOS_PATH := $(EOS_HOME)/$(strip $(EOS_dir))
endif
ifneq "$(wildcard $(NETWORK_HOME)/$(strip $(Network_dir)) )" ""
   NETWORK_PATH := $(NETWORK_HOME)/$(strip $(Network_dir))
endif

# Problems can specify the input file for general_null by
# setting GENERAL_NET_INPUTS directly (full path) or just
# specifying the name of the inputs file as NETWORK_INPUTS
# and let us sort it out
ifndef GENERAL_NET_INPUTS
   ifneq "$(wildcard $(NETWORK_INPUTS))" ""
      GENERAL_NET_INPUTS := $(NETWORK_INPUTS)
   else
      GENERAL_NET_INPUTS := $(CASTRO_HOME)/Microphysics/networks/general_null/$(NETWORK_INPUTS)
   endif
endif

include $(EOS_HOME)/Make.package
include $(EOS_PATH)/Make.package
EXTERN_CORE += $(EOS_HOME)
EXTERN_CORE += $(EOS_PATH)

# the helmholtz EOS has an include file -- also add a target to link the table
# into the problem directory.
ifeq ($(findstring helmholtz, $(EOS_dir)), helmholtz)
   all: table
endif

table:
	@if [ ! -f helm_table.dat ]; then echo Linking helm_table.dat; ln -s $(EOS_PATH)/helm_table.dat .;  fi

include $(NETWORK_HOME)/Make.package
include $(NETWORK_PATH)/Make.package
EXTERN_CORE += $(NETWORK_HOME)
EXTERN_CORE += $(NETWORK_PATH)

# Note that this should be located after the include of the EOS and Network includes
# since it has actions that depend on variables set there.

ifdef MICROPHYSICS_HOME
   include $(MICROPHYSICS_HOME)/EOS/Make.package
   include $(MICROPHYSICS_HOME)/networks/Make.package
endif


INCLUDE_LOCATIONS += $(EOS_HOME) $(EOS_PATH)
VPATH_LOCATIONS   += $(EOS_HOME) $(EOS_PATH)

INCLUDE_LOCATIONS += $(NETWORK_HOME) $(NETWORK_PATH)
VPATH_LOCATIONS   += $(NETWORK_HOME) $(NETWORK_PATH)


# AMReX directories -- note the Make.package for these adds these
# directories into VPATH_LOCATIONS and INCLUDE_LOCATIONS for us, so we
# don't need to do it here
Pdirs 	:= Base AmrCore Amr Boundary

Bpack	+= $(foreach dir, $(Pdirs), $(AMREX_HOME)/Src/$(dir)/Make.package)


# Castro directories
Bdirs 	:= Source Source/param_includes Source/Src_$(DIM)d Source/Src_nd

ifeq ($(USE_RAD), TRUE)
Bdirs +=   Source/Radiation Source/Radiation/_interpbndry \
           Source/Radiation/RadSrc_$(DIM)d Source/Radiation/RadSrc_nd
endif

Bpack	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(TOP)/$(dir))

include $(Bpack)

INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

ifeq ($(MEGA_FORTRAN), TRUE)
   F90EXE_sources += mega_f.F90
   #$(depEXETempDir)/f90.depends: mega_f.F90
else
   f90EXE_sources += $(ca_f90EXE_sources)
   F90EXE_sources += $(ca_F90EXE_sources)
endif

mega_f.F90: $(ca_F90EXE_sources) $(ca_f90EXE_sources)
	$(AMREX_HOME)/Tools/F_scripts/f90cat.py $^

# these are for finding runtime parameters
EXTERN_CORE += $(TOP)/constants

USE_MG = FALSE


include $(AMREX_HOME)/Src/F_BaseLib/FParallelMG.mak

# runtime parameter support for extern/ routines
f90EXE_sources += extern.f90

EXTERN_TEMPLATE := $(TOP)/Source/extern_probin.template

EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
           -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
           --pa "$(EXTERN_PARAMETERS)"

# job_info support
#CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts


MNAMES := EOS=$(EOS_PATH) NETWORK=$(NETWORK_PATH)
ifeq ($(USE_DIFFUSION), TRUE)
   MNAMES += CONDUCTIVITY=$(COND_PATH)
endif

ifeq ($(USE_RAD), TRUE)
   MNAMES += OPACITY=$(OPAC_PATH)
endif

# we make AMReX_buildInfo.cpp as we make the .o file, so we can delete it
# immediately.  this way if the build is interrupted, we are guaranteed
# to remake it

objForExecs += $(objEXETempDir)/AMReX_buildInfo.o

.FORCE:
.PHONE: .FORCE

# set BUILD_GIT_NAME and BUILD_GIT_DIR if you are building in a
# git-controlled dir not under Castro/
EXTRA_BUILD_INFO :=
ifdef BUILD_GIT_NAME
   EXTRA_BUILD_INFO := --build_git_name "$(BUILD_GIT_NAME)" \
                       --build_git_dir "$(BUILD_GIT_DIR)"
endif

$(objEXETempDir)/AMReX_buildInfo.o: .FORCE
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --CXX_comp_name "$(CXX)" --CXX_flags "$(CXXFLAGS) $(CPPFLAGS) $(includes)" \
          --F_comp_name "$(F90)" --F_flags "$(F90FLAGS)" \
          --link_flags "$(LDFLAGS)" --libraries "$(libraries)" \
          --MODULES "$(MNAMES)" $(EXTRA_BUILD_INFO) \
          --GIT "$(TOP) $(AMREX_HOME) $(MICROPHYSICS_HOME)"
	$(SILENT) $(CCACHE) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(CXXEXEFLAGS) AMReX_buildInfo.cpp -o $(objEXETempDir)/AMReX_buildInfo.o
	$(SILENT) $(RM) AMReX_buildInfo.cpp


include $(AMREX_HOME)/Tools/GNUMake/Make.rules

clean::
	$(SILENT) $(RM) extern.f90
	$(SILENT) $(RM) AMReX_buildInfo.cpp

# Older versions of CASTRO generated a
# "network.f90" file when using the
# general_null network, which conflicts
# with our generalized network.f90 file.
# So we should delete the local copy if
# we are trying to rebuild from an old directory.

clean::
	$(RM) network.f90
	@if [ -L helm_table.dat ]; then rm -f helm_table.dat; fi


#-----------------------------------------------------------------------------
# for debugging.  To see the value of a Makefile variable,
# e.g. Fmlocs, simply do "make print-Fmlocs".  This will
# print out the value.
print-%::
	@echo "$* is $($*)"
	@$(RM) AMReX_buildInfo.cpp
